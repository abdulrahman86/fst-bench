# Two data sets(text and numeric) are available, app argument indicates to use which
#app=micro-sketch      #use text dataset, avg record size: 60 bytes
#app=micro-statistics  #use numeric dataset, avg record size: 200 bytes
hibench.streamingbench.app        micro-sketch

# Text dataset can be scaled in terms of record size
hibench.streamingbench.prepare.textdataset_recordsize_factor 

# Two modes of generator: push,periodic
# Push means to send data to kafka cluster as fast as it could
# Periodic means sending data according to sending rate specification
hibench.streamingbench.prepare.mode     push
#hibench.streamingbench.prepare.mode     periodic

# Under push mode: number of total records that will be generated
hibench.streamingbench.prepare.push.records	900000000

# Following three params are under periodic mode
hibench.streamingbench.prepare.periodic.recordPerInterval

# Interval time (in ms)
hibench.streamingbench.prepare.periodic.intervalSpan

# Total round count of data send
hibench.streamingbench.prepare.periodic.totalRound

# zookeeper host of kafka cluster
hibench.streamingbench.zookeeper.host	lv-dev

#Parallel config
# number of nodes that will receive kafka input
hibench.streamingbench.receiver_nodes	48

###############
#Benchmark args
#Note to ensure benchName to be consistent with datagen type. Numeric data for statistics and text data for others
# available benchname: identity sample sketch grep wordcount distinctcount statistics
## available benchname: micro-identity micro-sample micro-sketch micro-grep micro-wordcount micro-distinctcount micro-statistics
## trident-identity trident-sample trident-sketch trident-grep trident-wordcount trident-distinctcount trident-statistics

hibench.streamingbench.benchname	identity
#hibench.streamingbench.benchname	micro-identity
#hibench.streamingbench.benchname	trident-identity

#common args
# the topic that spark will receive input data
hibench.streamingbench.topic_name	identity-source-60

# Spark stream batch interval
hibench.streamingbench.batch_interval	50

# consumer group of the spark consumer for kafka
hibench.streamingbench.consumer_group	xxx

# expected number of records to be processed
hibench.streamingbench.record_count	900000000

#sketch/distinctcount/statistics arg
# the field index of the record that will be extracted
hibench.streamingbench.field_index	1

#sketch/wordcount/distinctcount/statistics arg
# the seperator between fields of a single record
hibench.streamingbench.separator	\\s+

#sample arg
# probability that a record will be taken as a sample
hibench.streamingbench.prob		0.1

#grep arg
# the substring that will be checked to see if contained in a record
hibench.streamingbench.pattern		the

#common arg
# indicate RDD storage level. 
# 1 for memory only 1 copy. Others for default mem_disk_ser 2 copies 
hibench.streamingbench.copies		2

# indicate whether to test the write ahead log new feature
# set true to test WAL feature
hibench.streamingbench.testWAL		false

# if testWAL is true, this path to store stream context in hdfs shall be specified. If false, it can be empty
hibench.streamingbench.checkpoint_path	

#common arg
# indicate whether in debug mode for correctness verfication
hibench.streamingbench.debug		false

# whether to use direct approach or not
hibench.streamingbench.direct_mode	true

# Kafka broker lists, used for direct mode, written in mode "host:port,host:port,..."
hibench.streamingbench.brokerList	lv-dev:9092
hibench.streamingbench.broker_list_with_quote	"${hibench.streamingbench.brokerList}"

# storm bench conf

# STORM_BIN_HOME
hibench.streamingbench.storm.home	/home/lv/intel/cluster/storm/0.9.3/apache-storm-0.9.3

#Cluster config
# nimbus of storm cluster
hibench.streamingbench.storm.nimbus		lv-dev
hibench.streamingbench.storm.nimbusAPIPort	6627

# time interval to contact nimbus to judge if finished
hibench.streamingbench.storm.nimbusContactInterval	10


#Parallel config

# number of workers of Storm. Number of most bolt threads is also equal to this param.
hibench.streamingbench.storm.worker_count	12

# number of kafka spout threads of Storm
hibench.streamingbench.storm.spout_threads	12

# number of bolt threads altogether
hibench.streamingbench.storm.bolt_threads	12

# kafka arg indicating whether to read data from kafka from the start or go on to read from last position
hibench.streamingbench.storm.read_from_start	false

# whether to turn on ack
hibench.streamingbench.storm.ackon		true




# Added for default rules:
hibench.streamingbench.jars		${hibench.streamingbench.sparkbench.jar}
hibench.streamingbench.sparkbench.jar	${hibench.home}/src/streambench/sparkbench/target/streaming-bench-spark_0.1-4.0-SNAPSHOT-jar-with-dependencies.jar
hibench.streamingbench.stormbench.jar	${hibench.home}/src/streambench/stormbench/target/streaming-bench-storm-0.1-SNAPSHOT-jar-with-dependencies.jar
hibench.streamingbench.storm.bin	${hibench.streamingbench.storm.home}/bin
